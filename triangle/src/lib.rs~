extern crate num;

pub struct Triangle {
    a: f32,
    b: f32,
    c: f32,
}

impl Triangle {
    pub fn build(sides: [num::ToPrimitive; 3]) -> Result<Triangle, ()> {
        let a:f32 = sides[0].to_f32().unwrap();
        let b:f32 = f32::from(sides[1]);
        let c:f32 = f32::from(sides[2]);
        
        if a == 0 || b == 0 || c == 0 {
            return Err(());
        }

        if a + b < c || a + c < b || b + c < a {
            return Err(());
        }

        Ok(Triangle{
            a: a,
            b: b,
            c: c,
        })
    }

    pub fn is_equilateral(&self) -> bool {
        self.a == self.b && self.b == self.c
    }

    pub fn is_isosceles(&self) -> bool {
        self.a == self.b || self.b == self.c
    }

    pub fn is_scalene(&self) -> bool {
        !self.is_equilateral() && !self.is_isosceles()
    }
}
